---
title: "refugee data brainstorming"
format: 
  html:
    self-contained: true
editor: visual
---

```{r}
library(tidyverse)
library(refugees) # biannual dump from UNHCR
library(eurostat) # access eurostat API
library(countrycode) # convert ISO country codes to English names
```

using refugees package:

```{r}
data("population")
?population

# how many refugees in Italy from 2002-2017, grouped by country of origin
population %>% 
  select(year, coo_name, 
         coa_name, refugees, 
         asylum_seekers, returned_refugees) %>% 
  filter(coa_name %in% ("Italy") & between(year, 2002, 2017)) %>% 
  group_by(coo_name) %>% 
  summarize(total_refugees = sum(refugees), total_returned = sum(returned_refugees)) %>% 
  arrange(desc(total_refugees))

```

attempt at using eurostat package:

```{r}
# needs API key?:
get_eurostat("migr_eirfs")
```

eurostat cleaning: (example using the `migr_eirfs` set from <https://ec.europa.eu/eurostat/web/main/data/database>) (note: the chunk below does not need to be run if you simply load `migr_eirfs_clean.csv`---skip to next chunk)

```{r}
migr_eirfs_raw <- read_tsv("migr_eirfs.tsv", na=c(":", ": z"))

# structure:
migr_eirfs <- migr_eirfs_raw %>% 
  pivot_longer(cols=2:16,
                      names_to="year",
                      values_to="count") %>% 
  separate(col=1, 
           sep=",", 
           into=c("border", "unit", "reason", "citizen", "geo"))

# data types:
migr_eirfs <- migr_eirfs %>% 
  mutate(border=as_factor(border),
         unit=as_factor(unit),
         reason=as_factor(reason),
         citizen=as_factor(citizen),
         geo=as_factor(geo),
         year=as.integer(year),
         count=as.integer(count))

# remove empty counts: (drops many useless rows!)
migr_eirfs <- migr_eirfs %>% 
  filter(!is.na(count) & count > 0)

# add a country name columns, based on ISO codes
# note: generates an error because some values won't match (this is OK)
migr_eirfs <- migr_eirfs %>% 
  mutate(.after=citizen,
         citizen_name = as_factor(countrycode(citizen, origin="iso2c", destination="country.name"))) %>% 
  mutate(.after=geo,
         geo_name = as_factor(countrycode(geo, origin="iso2c", destination="country.name")))

# remove summary rows:
migr_eirfs <- migr_eirfs %>% 
  filter(border != "TOTAL",
         reason != "TOTAL",
         citizen != "TOTAL",
         geo != "TOTAL")

migr_eirfs %>% write_csv("migr_eirfs_clean.csv")
```

`unit` also appears to be a constant so could be removed. And I suspect that rows with a `geo` of "EU27_2020" should also be removed since they are presumably summary/aggregate rows.

Loading and examining the cleaned CSV

```{r}
migr_eirfs <- read_csv("migr_eirfs_clean.csv",
                       col_types = "fffffffii")
# fill empty names using unmatched codes:
migr_eirfs <- migr_eirfs %>% 
  mutate(geo_name = coalesce(geo_name, geo), .after=geo) %>% 
  mutate(citizen_name = coalesce(citizen_name, citizen), .after=citizen)
```

Count of refused entrants by country of origin:

```{r}
migr_eirfs %>% 
  group_by(citizen_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))
```

Count of refused entrants by country of arrival:

```{r}
migr_eirfs %>% 
  group_by(geo_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))

# bar chart of top 10
migr_eirfs %>% 
  group_by(geo_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>%
  mutate(geo_name = fct_reorder(geo_name, total_refused)) %>%
  arrange(desc(total_refused)) %>% 
  head(10) %>% 
  ggplot() +
  geom_col(aes(x=total_refused, y=geo_name), stat="identity")
```

By border:

```{r}
migr_eirfs %>% 
  group_by(border) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))
```

By reason:

```{r}
migr_eirfs %>% 
  group_by(reason) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))

# bar plot:
migr_eirfs %>% 
  group_by(reason) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  mutate(reason = fct_reorder(reason, total_refused)) %>% 
  ggplot() +
  geom_col(aes(x=total_refused, y=reason), stat="identity")
```

Any of the above data groupings (reason, geo_name, etc.) could be filtered by year first:

```{r}
# limit to 2019:
migr_eirfs %>% 
  filter(year == 2019) %>% 
  group_by(citizen_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))
```

By year: (note: year binning also possible, simply an extra step)

```{r}
migr_eirfs %>% 
  group_by(year) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused))

# line plot:
migr_eirfs %>% 
  group_by(year) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  ggplot() +
  geom_line(aes(x=year, y=total_refused))
```

5 most-refused and most-refusing countries over time:

(first we determine and isolate the 5 countries of interest into vectors, then we filter, group, and plot)

```{r}
# a vector of the 5 citizen_name values with highest counts:
citizen5 <- migr_eirfs %>% 
  group_by(citizen_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused)) %>% 
  head(5) %>% 
  pull(citizen_name)

# a vector of the 5 geo_name values with highest counts:
geo5 <- migr_eirfs %>% 
  group_by(geo_name) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  arrange(desc(total_refused)) %>% 
  head(5) %>% 
  pull(geo_name)

migr_eirfs %>% 
  filter(citizen_name %in% citizen5) %>% 
  group_by(citizen_name, year) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  ggplot() +
  geom_line(aes(x=year, y=total_refused, color=citizen_name))

migr_eirfs %>% 
  filter(geo_name %in% geo5) %>% 
  group_by(geo_name, year) %>% 
  summarize(total_refused = sum(count, na.rm=TRUE)) %>% 
  ggplot() +
  geom_line(aes(x=year, y=total_refused, color=geo_name))
```
